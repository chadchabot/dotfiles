#!/bin/bash

verbose=false

# Parse options for verbose flag
while getopts "v" opt; do
    case $opt in
        v) verbose=true ;;  # Enable verbose output
        *) echo "Usage: $0 [-v] <source_path> <dest_path>"; exit 1 ;;
    esac
done

# Shift the arguments so that $1 and $2 are the source and destination paths
shift $((OPTIND - 1))

source_path="$1"
dest_path="$2"

# Ensure source and destination paths are provided
if [[ -z "$source_path" || -z "$dest_path" ]]; then
    echo "Usage: $0 [-v] <source_path> <dest_path>"
    exit 1
fi

# Ensure we are handling the trailing slash for correct directory comparison
if [[ ! "$source_path" =~ /$ ]]; then
    source_path="$source_path/"
fi
if [[ ! "$dest_path" =~ /$ ]]; then
    dest_path="$dest_path/"
fi

# Initialize counts
source_count=0
dest_count=0
diff_count=0

echo "Comparing file content differences between:"
echo -e "\t$source_path"
echo -e "\t$dest_path"

# Run rsync once, using -n to simulate the operation and --itemize-changes to show detailed output
rsync -an --itemize-changes "$source_path" "$dest_path" | while IFS= read -r line; do
    # Check if the line indicates a source-only file (starts with '>f')
    if [[ "$line" =~ ^\>f ]]; then
        ((source_count++))
        if $verbose; then
            echo "Source only: $line"
        fi
    # Check if the line indicates a destination-only file (starts with '<f')
    elif [[ "$line" =~ ^\<f ]]; then
        ((dest_count++))
        if $verbose; then
            echo "Destination only: $line"
        fi
    # Check if the line indicates a differing file (starts with '*')
    elif [[ "$line" =~ ^\* ]]; then
        ((diff_count++))
        if $verbose; then
            echo "Differing: $line"
        fi
    fi
done

# Output the results
echo -e "\nComparison complete!"
echo "Files only in source ($source_path): $source_count"
echo "Files only in destination ($dest_path): $dest_count"
echo "Differing files: $diff_count"
